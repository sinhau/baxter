//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;

namespace arduino2_interface
{
public class arduino2_interfaceFactory : ServiceFactory
{
    public override string DefString()
{
    const string d=@"service arduino2_interface


object arduino2
	function void setPotentiometer(int32 motor, int32 speed)  
end object";
    return d;
    }
    public override string GetServiceName() {return "arduino2_interface";}
    public arduino2_interfaceFactory()
{
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    string objshort=RemovePath(objecttype);
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override MessageElementStructure PackStructure(Object s) {
    if (s==null) return null;
    string objtype=s.GetType().ToString();
    if (objtype.Split(new char[] {'.'})[0] == "arduino2_interface") {
    string objshort=RemovePath(objtype);
    switch (objshort) {
    default:
    break;
    }
    } else {
    return RobotRaconteurNode.s.PackStructure(s);
    }
    throw new Exception();
    }
    public override T UnpackStructure<T>(MessageElementStructure l) {
    if (l==null) return default(T);
    if (l.Type.Split(new char[] {'.'})[0] == "arduino2_interface") {
    string objshort=RemovePath(l.Type);
    switch (objshort) {
    default:
    break;
    }
    } else {
    return RobotRaconteurNode.s.UnpackStructure<T>(l);
    }
    throw new DataTypeException("Could not unpack structure");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    if (objecttype.Split(new char[] {'.'})[0] == "arduino2_interface") {
    string objshort=RemovePath(objecttype);
    switch (objshort) {
    case "arduino2":
    return new arduino2_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=objecttype.Split(new char[] {'.'})[0];
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype=ServiceSkelUtil.FindParentInterface(obj.GetType()).ToString();
    if (objtype.ToString().Split(new char[] {'.'})[0] == "arduino2_interface") {
    string sobjtype=RemovePath(objtype);
    switch(sobjtype) {
    case "arduino2":
    return new arduino2_skel((arduino2)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=objtype.ToString().Split(new char[] {'.'})[0];
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
}

public class arduino2_stub : ServiceStub , arduino2 {
    public arduino2_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public void setPotentiometer(int motor, int speed) {
    vectorptr_messageelement param=new vectorptr_messageelement();
    param.Add(new MessageElement("motor",new int[] {motor}));
    param.Add(new MessageElement("speed",new int[] {speed}));
    MessageElement me=rr_innerstub.FunctionCall("setPotentiometer",param);
    }
    public override void DispatchEvent(string membername, vectorptr_messageelement m) {
    switch (membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string membername, vectorptr_messageelement m) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
}
public class arduino2_skel : ServiceSkel {
    protected arduino2 obj;
    public arduino2_skel(object o) : base(o) { obj=(arduino2)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string membername, vectorptr_messageelement m) {
    switch (membername) {
    case "setPotentiometer":
    {
    int motor=(vectorptr_messageelement_util.FindElement(m,"motor").CastData<int[]>())[0];
    int speed=(vectorptr_messageelement_util.FindElement(m,"speed").CastData<int[]>())[0];
    obj.setPotentiometer(motor, speed);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(arduino2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(arduino2)rrobj1;
    }
    public override object GetCallbackFunction(uint endpoint, string membername) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(arduino2)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(arduino2)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(arduino2)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "arduino2_interface.arduino2"; } }
}
}
