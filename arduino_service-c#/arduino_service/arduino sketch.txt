
/* This file is meant to used as a server in arduino for 
connection with arduino server on computer with force sensor */
/*I refered to the code from  Author: Frank, Ken, Bob, Scot and

#include <Servo.h>
#include <digitalWriteFast.h>

/* define internal for the MEGA as 1.1V (as as for the 328)  */
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
#define INTERNAL INTERNAL1V1
#endif

/* define encoder structure                                  */
typedef struct { int pinA; int pinB; int pos; int del;} Encoder;    
volatile Encoder Enc[3] = {{0,0,0,0}, {0,0,0,0}, {0,0,0,0}};

/* create servo vector                                       */


int i = 0;
int cs = 6;
int rd = 8;
int wr = 2;
int xy = 5;
int cd = 4;
int xcount1 = 0;
int xcount2 = 0;
int xcount3 = 0;
int fsrAnalogPin = 0; // FSR is connected to analog 0
long xtotal = 0;
long xcount = 0;
int ycount1 = 0;
int ycount2 = 0;
int ycount3 = 0;
long ytotal = 0;
long ycount = 0;


 
// Set flags for decoder presets
byte loadBoth1   = B10001001;
byte loadBoth2   = B10010001;
byte countQuadx4 = B10111000;
byte resetCounter= B10000011;
byte resetFlag1  = B10000101;
byte resetFlag2  = B10000111;
byte getCount    = B10010001;
byte disableIndex= B11100010;
byte modulo      = B00000001;
byte loadPSC     = B10011001;
byte clearBP     = B10000001;
byte enableInput = B11000001;

void setup() {

//  int i;
//  for (i=0;i<20;i++) {
//    pinMode(i,INPUT);
//    digitalWrite(i,0);
//  }
//  /* initialize serial                                       */
//  Serial.begin(115200);
analogReference(INTERNAL2V56);
Serial.begin(115200);
// loop to assign all pins as outputs
  for(int i=22; i<=29; i++)
    {
      pinMode(i, OUTPUT);
      ;
    }
// loop to assign all pins as outputs
  for(int i=3; i<=11; i++)
    pinMode(i, OUTPUT);
 
  pinMode(cs, OUTPUT);
  pinMode(rd, OUTPUT);
  pinMode(wr, OUTPUT);
  pinMode(xy, OUTPUT);
  pinMode(cd, OUTPUT);
 
  digitalWrite(cs, HIGH);
  digitalWrite(rd, HIGH);
  digitalWrite(wr, HIGH);
 
  TCCR1B=0x09; // Remove preset on Timer2 speed; now scalable
 
 
 
  writeCommand(clearBP);
  writeDataX(modulo);
  writeDataX(0);
  writeDataX(0);
  writeDataY(modulo);
  writeDataY(0);
  writeDataY(0);
  writeCommand(loadPSC);
 
  writeCommand(loadBoth1);
  writeCommand(loadBoth2);
 
 
  writeCommand(countQuadx4);
  writeCommand(enableInput);
  writeCommand(resetFlag1);
  writeCommand(resetFlag2);
  writeCommand(disableIndex);
  writeCommand(resetCounter);
}


void loop() {
  
  /* variables declaration and initialization                */
  
  static int  s   = -1;    /* state                          */
  static int  pin = 13;    /* generic pin number             */
  static int  enc = 0;     /* generic encoder number         */
 
  int  val =  0;           /* generic value read from serial */
  int  agv =  0;           /* generic analog value           */
  int  dgv =  0;           /* generic digital value          */
 


       pinMode(i, OUTPUT);
       //Serial.println(ycount1);
       writeCommand(loadBoth1);
          writeCommand(loadBoth2);
 
        for(int i=22; i<=29; i++)
          {pinMode(i, INPUT);
    
          }
        

        
        ycount1=readDataY();
        ycount2 = readDataY();
        ycount3 = readDataY();
        ytotal=ycount3;
        ytotal=ytotal<<8;
        ytotal=ytotal+ycount2;
        ytotal=ytotal<<8;
        ytotal=ytotal+ycount1;
 //Serial.println(ycount1);

         xcount1=readDataX();
        xcount2 = readDataX();
        xcount3 = readDataX();
        xtotal=xcount3;
        xtotal=xtotal<<8;
        xtotal=xtotal+xcount2;
        xtotal=xtotal<<8;
        xtotal=xtotal+xcount1;
        
        
       for(int i=22; i<=29; i++)
         {pinMode(i, OUTPUT);
    
         }
       writeCommand(loadBoth2);
 
       for(int i=22; i<=29; i++)
         { pinMode(i, INPUT);
   
         }        
        //writeCommand(loadBoth2);
        // Convert counts so negative angles produce negative counts
       if(xtotal<=8388608)
        xcount=xtotal;
       else
        xcount = -(16777216-xtotal);
//   pinMode(i, OUTPUT);     
//        writeCommand(loadBoth2);
// 
//        for(int i=22; i<=29; i++)
//          {pinMode(i, INPUT);
//    
//          }
// 
//        ycount1=readDataY();
//        ycount2 = readDataY();
//        ycount3 = readDataY();
//        ytotal=ycount3;
//        ytotal=ytotal<<8;
//        ytotal=ytotal+ycount2;
//        ytotal=ytotal<<8;
//        ytotal=ytotal+ycount1;
// 
//
// 
//       for(int i=22; i<=29; i++)
//         {pinMode(i, OUTPUT);
//    
//         }
//       writeCommand(loadBoth2);
// 
//       for(int i=22; i<=29; i++)
//         { pinMode(i, INPUT);
//   
//         }
//        
//        
//
//    // Serial.println(xcount,DEC);
//
//       
      
// Convert counts so negative angles produce negative counts
       if(ytotal<=8388608)
       ycount=ytotal;
       else
       ycount = -(16777216-ytotal);
       //ycount = -(16777216-ytotal)+65536+256;
    //Serial.println(xcount,DEC);
  if (Serial.available() >0) {

    /* whatever is available from the serial is read here    */
    val = Serial.read();
    
    /* This part basically implements a state machine that 
       reads the serial port and makes just one transition 
       to a new state, depending on both the previous state 
       and the command that is read from the serial port. 
       Some commands need additional inputs from the serial 
       port, so they need 2 or 3 state transitions (each one
       happening as soon as anything new is available from 
       the serial port) to be fully executed. After a command 
       is fully executed the state returns to its initial 
       value s=-1                                            */

    switch (s) {

      
      /* s=-1 means NOTHING RECEIVED YET ******************* */
      case -1:      

      /* calculate next state                                */
      if (val>47 && val<90) {
	  /* the first received value indicates the mode       
           49 is ascii for 1, ... 90 is ascii for Z          
           s=0 is change-pin mode;
           s=10 is DI;  s=20 is DO;  s=30 is AI;  s=40 is AO; 
           s=50 is servo status; s=60 is aervo attach/detach;  
           s=70 is servo read;   s=80 is servo write;
           s=90 is query script type (1 basic, 2 motor);
           s=210 is encoder attach; s=220 is encoder detach;
           s=230 is get encoder position; s=240 is encoder reset;
           s=250 is set encoder debounce delay;
           s=340 is change analog reference;
           s=400 example echo returning the input argument;
                                                             */
        s=10*(val-48);
      }
      
      /* the following statements are needed to handle 
         unexpected first values coming from the serial (if 
         the value is unrecognized then it defaults to s=-1) */
      if ((s>90 && s<210) || (s>250 && s!=340 && s!=400)) {
        s=-1;
      }

      /* the break statements gets out of the switch-case, so
      /* we go back to line 97 and wait for new serial data  */
      break; /* s=-1 (initial state) taken care of           */
      /* s=10 means DIGITAL INPUT ************************** */
      
      case 10:
      /* the second received value indicates the pin 
         from abs('c')=99, pin 2, to abs(' ')=166, pin 69    */
      if (val>98 && val<167) {
        pin=val-97;                /* calculate pin          */
        dgv=digitalRead(pin);      /* perform Digital Input  */
        Serial.println(dgv);       /* send value via serial  */
      }
      s=-1;  /* we are done with DI so next state is -1      */
      break; /* s=10 taken care of            */
      
      
      /* s=20 or 21 means DIGITAL OUTPUT ******************* */
      
      case 20:
      /* the second received value indicates the pin 
         from abs('c')=99, pin 2, to abs(' ')=166, pin 69    */
      if (val>98 && val<167) {
        pin=val-97;                /* calculate pin          */
        s=21; /* next we will need to get 0 or 1 from serial */
      } 
      else {
        s=-1; /* if value is not a pin then return to -1     */
      }
      break; /* s=20 taken care of                           */

      case 21:
      /* the third received value indicates the value 0 or 1 */ 
      if (val>47 && val<50) {
        dgv=val-48;                /* calculate value        */
	    digitalWrite(pin,dgv);     /* perform Digital Output */
      }
      s=-1;  /* we are done with DO so next state is -1      */
      break; /* s=21 taken care of                           */


      /* s=30 means ANALOG INPUT *************************** */
      
      case 30:
      /* the second received value indicates the pin 
         from abs('a')=97, pin 0, to abs('p')=112, pin 15    */
      if (val>96 && val<113) {
        pin=val-97;                /* calculate pin          */
        agv=analogRead(pin);       /* perform Analog Input   */
	Serial.println(agv);       /* send value via serial  */
      }
      s=-1;  /* we are done with AI so next state is -1      */
      break; /* s=30 taken care of                           */


      /* s=40 or 41 means ANALOG OUTPUT ******************** */
      
      case 40:
      /* the second received value indicates the pin 
         from abs('c')=99, pin 2, to abs(' ')=166, pin 69    */
      if (val>98 && val<167) {
        pin=val-97;                /* calculate pin          */
        s=41; /* next we will need to get value from serial  */
      }
      else {
        s=-1; /* if value is not a pin then return to -1     */
      }
      break; /* s=40 taken care of                           */


      case 41:
      /* the third received value indicates the analog value */
      analogWrite(pin,val);        /* perform Analog Output  */
      s=-1;  /* we are done with AO so next state is -1      */
      break; /* s=41 taken care of                           */
    


      /* s=230 means GET ENCODER POSITION ****************** */
      
      case 230:
      /* the second value indicates the encoder number:
         either 0, 1 or 2                                    */
      if (val>47 && val<51) {
        enc=val-48;        /* calculate encoder number       */
        /* send the value back                               */
        if (enc==0)
        Serial.println(xcount,DEC);
        else
        Serial.println(ycount,DEC);
      }
      s=-1;  /* we are done with encoder detach so -1        */
      break; /* s=230 taken care of                          */


      /* s=240 means RESET ENCODER POSITION **************** */
      
      case 240:
      /* the second value indicates the encoder number:
         either 0, 1 or 2                                    */
      if (val>47 && val<51) {
        enc=val-48;        /* calculate encoder number       */
        /* reset position                                    */
        xcount=0;
        ycount=0;
        for(int i=22; i<=29; i++)
    {
      pinMode(i, OUTPUT);
      ;
    }
// loop to assign all pins as outputs
  for(int i=3; i<=11; i++)
    pinMode(i, OUTPUT);
 
  pinMode(cs, OUTPUT);
  pinMode(rd, OUTPUT);
  pinMode(wr, OUTPUT);
  pinMode(xy, OUTPUT);
  pinMode(cd, OUTPUT);
 
  digitalWrite(cs, HIGH);
  digitalWrite(rd, HIGH);
  digitalWrite(wr, HIGH);
 
  TCCR1B=0x09; // Remove preset on Timer2 speed; now scalable
 
 
 
  writeCommand(clearBP);
  writeDataX(modulo);
  writeDataX(0);
  writeDataX(0);
  writeDataY(modulo);
  writeDataY(0);
  writeDataY(0);
  writeCommand(loadPSC);
 
  writeCommand(loadBoth1);
  writeCommand(loadBoth2);
 
 
  writeCommand(countQuadx4);
  writeCommand(enableInput);
  writeCommand(resetFlag1);
  writeCommand(resetFlag2);
  writeCommand(disableIndex);
  writeCommand(resetCounter);
      }
      s=-1;  /* we are done with encoder detach so -1        */
      break; /* s=240 taken care of                          */
      
      /* ******* UNRECOGNIZED STATE, go back to s=-1 ******* */
      
      default:
      /* we should never get here but if we do it means we 
         are in an unexpected state so whatever is the second 
         received value we get out of here and back to s=-1  */
      
      s=-1;  /* go back to the initial state, break unneeded */
  }
 }
}

void writeDataX(byte data)
{
  int j=0;
 
  digitalWrite(xy, LOW);
  digitalWrite(cd, LOW);
 
  for (int i=29; i>=22; i--)
  {
      j=29-i;
      digitalWrite(i, (data>>j) & B1);
      
  }
//  digitalWrite(12, (data>>6) & B1);
//  digitalWrite(13, (data>>7) & B1);
 
    digitalWrite(cs, LOW);
    digitalWrite(wr, LOW);
    digitalWrite(wr, HIGH);
    digitalWrite(cs, HIGH);
}
 

byte readDataX()
 
{
 
  int j=0;
 
  byte data=B00000000;
  digitalWrite(xy, LOW);
  digitalWrite(cd, LOW);
  digitalWrite(rd, LOW);
  digitalWrite(cs, LOW);
 
 
//  data=data+digitalRead(13);
//  data=data<<1;
//  data=data+digitalRead(12);
 
  for (int i=22; i<=28; i++)
  {
//    j=i-14;
    
    data=data+digitalRead(i);
    data=data<<1;
    
  }
 data=data+digitalRead(29);
  digitalWrite(rd, HIGH);
  digitalWrite(cs, HIGH);
 
  return (data);
}


void writeDataY(byte data)
{
  int j=0;
 
  digitalWrite(xy, HIGH);
  digitalWrite(cd, LOW);
 
  for (int i=29; i>=22; i--)
  {
      j=29-i;
      digitalWrite(i, (data>>j) & B1);
      
  }
 
    digitalWrite(cs, LOW);
    digitalWrite(wr, LOW);
    digitalWrite(wr, HIGH);
    digitalWrite(cs, HIGH);
}
byte readDataY()
 
{
 
  int j=0;
 
  byte data=B00000000;
  digitalWrite(xy, HIGH);
  digitalWrite(cd, LOW);
  digitalWrite(rd, LOW);
  digitalWrite(cs, LOW);
 
 
  for (int i=22; i<=28; i++)
  {
//    j=i-14;
    
    data=data+digitalRead(i);
    data=data<<1;
    
  }
 
  digitalWrite(rd, HIGH);
  digitalWrite(cs, HIGH);
 
  return (data);
}
 



void writeCommand(byte command)
 
{
  int j=0;
  digitalWrite(xy, HIGH);
  digitalWrite(cd, HIGH);
 
  for (int i=29; i>=22; i--)
  {
      j=29-i;
      digitalWrite(i, (command>>j) & B1);
      
  }
//  digitalWrite(12, (command>>6) & B1);
//  digitalWrite(13, (command>>7) & B1);
 
  digitalWrite(cs, LOW);
  digitalWrite(wr, LOW);
  digitalWrite(cs, HIGH);
  digitalWrite(wr, HIGH);
}